"""init db

Revision ID: a87252de8c96
Revises:
Create Date: 2025-06-22 13:24:13.119099

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "a87252de8c96"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "portfolio",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.Column("comment", sa.String(length=255), nullable=True),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now()::timestamp)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now()::timestamp)"),
            nullable=False,
        ),
        sa.Column("is_activate", sa.Boolean(), nullable=False),
        sa.Column("account_user_id", sa.Uuid(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_portfolio_account_user_id"),
        "portfolio",
        ["account_user_id"],
        unique=False,
    )
    op.create_index(op.f("ix_portfolio_id"), "portfolio", ["id"], unique=True)
    op.create_index(
        op.f("ix_portfolio_name"), "portfolio", ["name"], unique=False
    )
    op.create_table(
        "account",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.Column("comment", sa.String(length=255), nullable=True),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now()::timestamp)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now()::timestamp)"),
            nullable=False,
        ),
        sa.Column("is_activate", sa.Boolean(), nullable=False),
        sa.Column("account_user_id", sa.Uuid(), nullable=False),
        sa.Column("portfolio_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["portfolio_id"], ["portfolio.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_account_account_user_id"),
        "account",
        ["account_user_id"],
        unique=False,
    )
    op.create_index(op.f("ix_account_id"), "account", ["id"], unique=True)
    op.create_index(op.f("ix_account_name"), "account", ["name"], unique=False)
    op.create_index(
        op.f("ix_account_portfolio_id"),
        "account",
        ["portfolio_id"],
        unique=False,
    )
    op.create_table(
        "account_balance",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now()::timestamp)"),
            nullable=False,
        ),
        sa.Column(
            "amount",
            sa.Float(precision=9, decimal_return_scale=2),
            nullable=False,
        ),
        sa.Column(
            "currency",
            sa.Enum("RUB", "USD", "EUR", "CNY", name="currency"),
            nullable=False,
        ),
        sa.Column("account_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["account_id"], ["account.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_account_balance_account_id"),
        "account_balance",
        ["account_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_account_balance_currency"),
        "account_balance",
        ["currency"],
        unique=False,
    )
    op.create_index(
        op.f("ix_account_balance_id"), "account_balance", ["id"], unique=True
    )
    op.create_table(
        "instrument_group",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.Column("comment", sa.String(length=255), nullable=True),
        sa.Column(
            "value",
            sa.Float(precision=9, decimal_return_scale=2),
            nullable=False,
        ),
        sa.Column("percentage", sa.Float(), nullable=False),
        sa.Column("account_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["account_id"], ["account.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_instrument_group_account_id"),
        "instrument_group",
        ["account_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_instrument_group_id"), "instrument_group", ["id"], unique=True
    )
    op.create_index(
        op.f("ix_instrument_group_name"),
        "instrument_group",
        ["name"],
        unique=False,
    )
    op.create_table(
        "balance_history",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now()::timestamp)"),
            nullable=False,
        ),
        sa.Column(
            "type",
            sa.Enum(
                "ADDING",
                "DEDUCTION",
                "BUY",
                "SELL",
                "COUPON_PAYMENT",
                "DIVIDEND_PAYMENT",
                "TAX_WRITE_OFF",
                "COMMISSION_WRITE_OFF",
                "DENOMINATION_PYMENT",
                "BOND_AMORTIZATION",
                "UNKNOWN",
                name="balanceoperationtype",
            ),
            nullable=False,
        ),
        sa.Column(
            "amount_before",
            sa.Float(precision=9, decimal_return_scale=2),
            nullable=False,
        ),
        sa.Column(
            "amount",
            sa.Float(precision=9, decimal_return_scale=2),
            nullable=False,
        ),
        sa.Column("comment", sa.String(length=255), nullable=True),
        sa.Column("account_balance_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["account_balance_id"], ["account_balance.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_balance_history_account_balance_id"),
        "balance_history",
        ["account_balance_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_balance_history_id"), "balance_history", ["id"], unique=True
    )
    op.create_index(
        op.f("ix_balance_history_type"),
        "balance_history",
        ["type"],
        unique=False,
    )
    op.create_table(
        "instrument",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("ticker", sa.String(length=20), nullable=False),
        sa.Column("count", sa.Integer(), nullable=False),
        sa.Column("account_id", sa.Uuid(), nullable=False),
        sa.Column("instrument_group_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(
            ["account_id"], ["account.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["instrument_group_id"],
            ["instrument_group.id"],
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_instrument_account_id"),
        "instrument",
        ["account_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_instrument_id"), "instrument", ["id"], unique=True
    )
    op.create_index(
        op.f("ix_instrument_ticker"), "instrument", ["ticker"], unique=False
    )
    op.create_table(
        "coupon_dividend",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "date",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now()::timestamp)"),
            nullable=False,
        ),
        sa.Column(
            "amount",
            sa.Float(precision=9, decimal_return_scale=2),
            nullable=False,
        ),
        sa.Column(
            "currency",
            sa.Enum("RUB", "USD", "EUR", "CNY", name="currency"),
            nullable=False,
        ),
        sa.Column("ticker", sa.String(), nullable=False),
        sa.Column(
            "type",
            sa.Enum(
                "COUPON", "DIVIDEND", "UNKNOWN", name="coupondividendtype"
            ),
            nullable=False,
        ),
        sa.Column("account_id", sa.Uuid(), nullable=False),
        sa.Column("instrument_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["account_id"], ["account.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["instrument_id"], ["instrument.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_coupon_dividend_account_id"),
        "coupon_dividend",
        ["account_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_coupon_dividend_id"), "coupon_dividend", ["id"], unique=True
    )
    op.create_index(
        op.f("ix_coupon_dividend_instrument_id"),
        "coupon_dividend",
        ["instrument_id"],
        unique=False,
    )
    op.create_table(
        "trades",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now()::timestamp)"),
            nullable=False,
        ),
        sa.Column(
            "currency",
            sa.Enum("RUB", "USD", "EUR", "CNY", name="currency"),
            nullable=False,
        ),
        sa.Column("quantity", sa.Integer(), nullable=False),
        sa.Column(
            "amount",
            sa.Float(precision=9, decimal_return_scale=2),
            nullable=False,
        ),
        sa.Column(
            "commission",
            sa.Float(precision=9, decimal_return_scale=2),
            nullable=False,
        ),
        sa.Column(
            "tax",
            sa.Float(precision=9, decimal_return_scale=2),
            nullable=False,
        ),
        sa.Column(
            "balance_before",
            sa.Float(precision=9, decimal_return_scale=2),
            nullable=False,
        ),
        sa.Column(
            "balance_after",
            sa.Float(precision=9, decimal_return_scale=2),
            nullable=False,
        ),
        sa.Column(
            "trade_type",
            sa.Enum(
                "BUY",
                "SELL",
                "COUPON_PAYMENT",
                "DIVIDEND_PAYMENT",
                "TAX_WRITE_OFF",
                "DENOMINATION_PYMENT",
                "BOND_AMORTIZATION",
                "UNKNOWN",
                name="tradetype",
            ),
            nullable=False,
        ),
        sa.Column("ticker", sa.String(), nullable=False),
        sa.Column("account_id", sa.Uuid(), nullable=False),
        sa.Column("instrument_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["account_id"], ["account.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["instrument_id"], ["instrument.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_trades_account_id"), "trades", ["account_id"], unique=False
    )
    op.create_index(op.f("ix_trades_id"), "trades", ["id"], unique=True)
    op.create_index(
        op.f("ix_trades_instrument_id"),
        "trades",
        ["instrument_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_trades_ticker"), "trades", ["ticker"], unique=False
    )
    op.create_index(
        op.f("ix_trades_trade_type"), "trades", ["trade_type"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_trades_trade_type"), table_name="trades")
    op.drop_index(op.f("ix_trades_ticker"), table_name="trades")
    op.drop_index(op.f("ix_trades_instrument_id"), table_name="trades")
    op.drop_index(op.f("ix_trades_id"), table_name="trades")
    op.drop_index(op.f("ix_trades_account_id"), table_name="trades")
    op.drop_table("trades")
    op.drop_index(
        op.f("ix_coupon_dividend_instrument_id"), table_name="coupon_dividend"
    )
    op.drop_index(op.f("ix_coupon_dividend_id"), table_name="coupon_dividend")
    op.drop_index(
        op.f("ix_coupon_dividend_account_id"), table_name="coupon_dividend"
    )
    op.drop_table("coupon_dividend")
    op.drop_index(op.f("ix_instrument_ticker"), table_name="instrument")
    op.drop_index(op.f("ix_instrument_id"), table_name="instrument")
    op.drop_index(op.f("ix_instrument_account_id"), table_name="instrument")
    op.drop_table("instrument")
    op.drop_index(
        op.f("ix_balance_history_type"), table_name="balance_history"
    )
    op.drop_index(op.f("ix_balance_history_id"), table_name="balance_history")
    op.drop_index(
        op.f("ix_balance_history_account_balance_id"),
        table_name="balance_history",
    )
    op.drop_table("balance_history")
    op.drop_index(
        op.f("ix_instrument_group_name"), table_name="instrument_group"
    )
    op.drop_index(
        op.f("ix_instrument_group_id"), table_name="instrument_group"
    )
    op.drop_index(
        op.f("ix_instrument_group_account_id"), table_name="instrument_group"
    )
    op.drop_table("instrument_group")
    op.drop_index(op.f("ix_account_balance_id"), table_name="account_balance")
    op.drop_index(
        op.f("ix_account_balance_currency"), table_name="account_balance"
    )
    op.drop_index(
        op.f("ix_account_balance_account_id"), table_name="account_balance"
    )
    op.drop_table("account_balance")
    op.drop_index(op.f("ix_account_portfolio_id"), table_name="account")
    op.drop_index(op.f("ix_account_name"), table_name="account")
    op.drop_index(op.f("ix_account_id"), table_name="account")
    op.drop_index(op.f("ix_account_account_user_id"), table_name="account")
    op.drop_table("account")
    op.drop_index(op.f("ix_portfolio_name"), table_name="portfolio")
    op.drop_index(op.f("ix_portfolio_id"), table_name="portfolio")
    op.drop_index(op.f("ix_portfolio_account_user_id"), table_name="portfolio")
    op.drop_table("portfolio")
    # ### end Alembic commands ###
